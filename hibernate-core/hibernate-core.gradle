/*
 * Hibernate, Relational Persistence for Idiomatic Java (NuoDB 5.6 OLD)
 *
 * License: GNU Lesser General Public License (LGPL), version 2.1 or later.
 * See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>.
 */
import org.apache.tools.ant.filters.ReplaceTokens
import org.gradle.api.tasks.testing.TestResult.ResultType

// BEGIN: For NUODB V5
// Can't think of a way to make this generic, but we only test NuoDB
buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'com.nuodb.jdbc:nuodb-jdbc:24.1.0'
        classpath "com.nuodb.hibernate:nuodb-hibernate:${nuodbHibernateJarVersion}"
    }
}
// END: For NUODB


description = 'Hibernate\'s core ORM functionality'

apply from: rootProject.file( 'gradle/published-java-module.gradle' )
apply plugin: 'antlr'
apply plugin: 'hibernate-matrix-testing'
apply plugin: 'org.hibernate.build.gradle.xjc'

// BEGIN: For NUODB
println "hibernate-core: Using NuoDB Dialect from JAR V${nuodbHibernateJarVersion}"

// Is NuoDB's Hibernate JAR available?
NuoDBDependencies.checkDependencies()
// END: For NUODB

ext {
    jaxbTargetDir = file( "${buildDir}/generated-src/jaxb/main" )
}

sourceSets.main {
    java.srcDir project.jaxbTargetDir
}

sourceSets {
    // resources inherently exclude sources
    test {
        resources {
            srcDir 'src/test/java'
        }
    }
}

configurations {
    tests {
        description = 'Configuration for the produced test jar'
    }
}

dependencies {

    implementation( libraries.jpa )
    // Could be made optional?
    implementation( libraries.byteBuddy )
    implementation( libraries.antlr )
    implementation( libraries.jta )
    implementation( libraries.jandex )
    implementation( libraries.classmate )
    implementation( libraries.activation )

    implementation( "com.nuodb.hibernate:nuodb-hibernate:${nuodbHibernateJarVersion}" )
    
    // We need dom4j for a number of things temporarily:
    //      1) (unsupported) EntityMode.DOM4J support
    //      2) Envers
    //      3) hibernate-commons-annotations
    implementation( libraries.dom4j )
    implementation( libraries.commons_annotations )
    antlr( libraries.antlr )

    // JAXB
    implementation( libraries.jaxb_api )
    implementation( libraries.jaxb_runtimeOnly )
    xjc( libraries.jaxb_runtimeOnly )
    xjc( libraries.jaxb_xjc )
    xjc( libraries.jaxb2_basics )
    xjc( libraries.jaxb2_basics_ant )
    xjc( libraries.activation )

    provided( libraries.jacc )
    provided( libraries.validation )
    provided( libraries.ant )
    provided( libraries.cdi )

    testImplementation( project(':hibernate-testing') )
    testImplementation( libraries.shrinkwrap_api )
    testImplementation( libraries.shrinkwrap )
    testImplementation( libraries.jacc )
    testImplementation( libraries.validation )
    testImplementation( libraries.jandex )
    testImplementation( libraries.classmate )
    testImplementation( libraries.mockito )
    testImplementation( libraries.mockito_inline )
    testImplementation( libraries.jodaTime )
    testImplementation( libraries.assertj )

    testImplementation( libraries.cdi )

    testImplementation( libraries.validator ) {
        // for test runtime
        transitive = true
    }

    // for testing stored procedure support
    testImplementation( libraries.derby )

    testRuntimeOnly( "org.jboss.spec.javax.ejb:jboss-ejb-api_3.2_spec:1.0.0.Final" )
    testRuntimeOnly( libraries.expression_language )
    testRuntimeOnly( 'jaxen:jaxen:1.1' )
    testRuntimeOnly( libraries.byteBuddy )
    testRuntimeOnly( libraries.weld )
    testRuntimeOnly( libraries.atomikos )
    testRuntimeOnly( libraries.atomikos_jta )
    testRuntimeOnly( libraries.wildfly_transaction_client )

    testRuntimeOnly( "com.nuodb.hibernate:nuodb-hibernate:${nuodbHibernateJarVersion}" )
    testRuntimeOnly( "com.nuodb.jdbc:nuodb-jdbc:24.1.0" )

    testAnnotationProcessor( project( ':hibernate-jpamodelgen' ) )

    testImplementation libraries.shrinkwrap_descriptors_api_javaee
    testImplementation libraries.shrinkwrap_descriptors_impl_javaee

    testImplementation libraries.jboss_ejb_spec_jar
    testImplementation libraries.jboss_annotation_spec_jar

    // Additional tests requiring Javassist
    // folder in src/javassist/java
    testImplementation "com.nuodb.hibernate:nuodb-hibernate:${nuodbHibernateJarVersion}"
}

jar {
    manifest {
        attributes(
                'Main-Class': 'org.hibernate.Version',

                // BND Plugin instructions (for OSGi):
                'Import-Package': [
                        'javax.security.auth;resolution:=optional',
                        // Make javax.security.jacc optional and do not reference a version range (because that's what we used to do)
                        'javax.security.jacc;resolution:=optional;version=!',
                        // Make javax.validation optional and do not reference a version range (because that's what we used to do)
                        'javax.validation;resolution:=optional;version=!',
                        'javax.validation.constraints;resolution:=optional;version=!',
                        'javax.validation.groups;resolution:=optional;version=!',
                        'javax.validation.metadata;resolution:=optional;version=!',
                        // Make javax.enterprise optional and do not reference a version range (because that's what we used to do)
                        '!javax.enterprise*',
                        'javax.enterprise.context.spi;resolution:=optional;version=!',
                        'javax.enterprise.inject.spi;resolution:=optional;version=!',
                        // For JPA, we don't want to target the automatically generated range, but a specific version
                        "javax.persistence;version=\"${project.jpaVersion.osgiName}\"",
                        // optionals
                        'jakarta.persistence.spi;resolution:=optional',
                        'javax.management;resolution:=optional',
                        'javax.naming.event;resolution:=optional',
                        'javax.naming.spi;resolution:=optional',
                        'org.apache.tools.ant;resolution:=optional',
                        'org.apache.tools.ant.taskdefs;resolution:=optional',
                        'org.apache.tools.ant.types;resolution:=optional',
                        'javax.inject;resolution:=optional',
                        'net.bytebuddy.*;resolution:=optional',
                        'org.objectweb.jonas_tm;resolution:=optional',
                        'com.ibm.websphere.jtaextensions;resolution:=optional',
                        // We must specify the version explicitly to allow Karaf
                        // to use an older version of JAXB (the only one we can use in Karaf)
                        "javax.xml.bind.*;version=\"${project.jaxbApiVersionOsgiRange}\"",
                        // Temporarily support JTA 1.1 -- Karaf and other frameworks still
                        // use it.  Without this, the plugin generates [1.2,2).
                        'javax.transaction;version="[1.1,2)"',
                        // Also import every package referenced in the code
                        '*'
                ].join( ',' ),
                '-exportcontents': [
                        // Legacy resource packages containing XSDs that were traditionally not exported
                        "!org.hibernate.xsd.cfg",
                        "!org.hibernate.xsd.mapping",
                        // TODO: Uncomment once EntityManagerFactoryBuilderImpl no longer uses ClassLoaderServiceImpl.
                        //'org.hibernate.boot.registry.classloading.internal',
                        "*;version=${project.version}"
                ].join( ',' ),
        )
    }
}

ext {
	jaxbTargetDir = file( "${buildDir}/generated-src/jaxb/main" )
	
	// For ECLIPSE/STS
	javaMainTargetDir = file( "${buildDir}/classes/java/main" )
	javaTestTargetDir = file( "${buildDir}/classes/test/main" )
	aptMainTargetDir = file( "${buildDir}/generated-src/apt/main" )
	aptTestTargetDir = file( "${buildDir}/generated-src/apt/test" )
	docuSrcDir = file( "${buildDir}/../../documentation/src/main/java" )
	docuGenTargetDir = file( "${buildDir}/../../documentation/target/generated-src/apt/main" )
	enversSrcDir = file( "${buildDir}/../../hibernate-envers/src/main/java" )
	enversGenTargetDir = file( "${buildDir}/../../hibernate-envers/target/generated-src/apt/main" )
	// END
}

sourceSets.main {
    //java.srcDir project.jaxbTargetDir
    
    java.srcDirs += [
    	project.jaxbTargetDir,

     	project.javaMainTargetDir,
  	 	project.javaTestTargetDir,
     	project.aptMainTargetDir,
     	project.aptTestTargetDir,
     	project.docuSrcDir, 
     	project.docuGenTargetDir,
     	project.enversSrcDir,
		project.enversGenTargetDir ]

}

// resources inherently exclude sources
sourceSets.test.resources {
    setSrcDirs( ['src/test/java','src/test/resources'] )
}

//idea {
//	module {
//		sourceDirs += file( "${buildDir}/generated-src/antlr/main" )
//	}
//}

xjc {
    outputDir = project.jaxbTargetDir

    schemas {
        cfg {
            xsd = file( 'src/main/resources/org/hibernate/xsd/cfg/legacy-configuration-4.0.xsd' )
            xjcBinding = file( 'src/main/xjb/hbm-configuration-bindings.xjb' )
        }
        hbm {
            xsd = file( 'src/main/resources/org/hibernate/xsd/mapping/legacy-mapping-4.0.xsd' )
            xjcBinding = file( 'src/main/xjb/hbm-mapping-bindings.xjb' )
            xjcExtensions = ['inheritance', 'simplify']
        }
        mapping {
            xsd = file( 'src/main/resources/org/hibernate/jpa/orm_2_2.xsd' )
            xjcBinding = file( 'src/main/xjb/mapping-bindings.xjb' )
            xjcExtensions = ['inheritance']
        }
    }
}

generateGrammarSource {
    arguments += "-traceParser"
}

//sourceSets.main.sourceGeneratorsTask.dependsOn xjc
//sourceSets.main.sourceGeneratorsTask.dependsOn generateGrammarSource
tasks.compile.dependsOn generateGrammarSource

task copyBundleResources (type: Copy) {
    ext {
        bundleTokens = dbBundle[db]
        ext.bundleTokens['buildDirName'] = buildDir.absolutePath
    }

    from 'src/test/bundles/templates'
    into "${buildDir}/bundles"
    filter( ReplaceTokens, tokens: ext.bundleTokens)
}
processTestResources.dependsOn copyBundleResources

sourcesJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task testJar(type: Jar, dependsOn: testClasses) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveClassifier.set( 'test' )
    from sourceSets.test.output
    from( "${buildDir}/bundles" ) {
        into 'bundles'
    }
}

artifacts {
    tests testJar
}

test {
    systemProperty 'file.encoding', 'utf-8'

    if ( gradle.ext.javaVersions.test.launcher.asInt() >= 9 ) {
        // See org.hibernate.boot.model.naming.NamingHelperTest.DefaultCharset.set
        jvmArgs( ['--add-opens', 'java.base/java.nio.charset=ALL-UNNAMED'] )
        // Weld needs this to generate proxies
        jvmArgs( ['--add-opens', 'java.base/java.security=ALL-UNNAMED'] )
        jvmArgs( ['--add-opens', 'java.base/java.lang=ALL-UNNAMED'] )
    }

    // beforeTest { descriptor ->
    //     println "Starting test: " + descriptor
    // }

    // Is there a database running?
    NuoDBDependencies.isDatabaseAvailable("${projectDir}/src/test/resources/hibernate.properties")
    
    // Dynamically retrieves the plan of tests to run. If not provided, all tests are included.
    // Pre-defined test plans are: green and red.
    // Custom plans can be created as long the .test-list file is added to hibernate-core and
    // the environment variable is set to the name of the file without the file extension
    //  Linux Example: TEST_PLAN=green ./gradlew clean :hibernate-core:test
    def testPlan = System.env['TEST_PLAN']

    if (testPlan != null) {
	    def testFile = file( "${testPlan}.test-list" )
        if (testFile.exists() && testFile.readLines()) {
            def testList = testFile.readLines()
            println "Using ${testPlan.toUpperCase()} test plan."
            filter {
                testList.each { testName ->
                    if ( testName.startsWith('#')) {
                    }  // ignore
                    else    
                    	includeTestsMatching testName
                }
            }
        } else {
            println ""
            println "  Environment variable TEST_PLAN is set as ${testPlan} but no ${testPlan}.test-list file was found."
            println ""
            println "  A '.test-file' contains a list of just the tests you wish to run.  Each line contains"
            println "  the fully qualified class name of a test to run.  Lines starting with # are ignored."
            println ""
            println "  To define your own list, create a new file, such as `hibernate-core/my.test-list`, and"
            println "  set the environment variable like so:"
            println "      export TEST_PLAN=my   (Linux, MacOS)"
            println "      set    TEST_PLAN=my   (MS Windows)"
            println "  Run the test command again."
            println ""
            ant.fail("File hibernate-core/${testPlan}.test-list not found")
            //System.exit(-1);  // Gradle hates this, and generates unwanted output, 
                                // but offers no way to abort a build quietly.
        }
    } else {
        println "Running all tests!"
    }

    // Allow to exclude specific tests
    if (project.hasProperty('excludeTests')) {
        filter {
            excludeTestsMatching project.property('excludeTests').toString()
        }
    }
}

// BEGIN: For NUODB
/**
 * Is the test database available? Can't think of a way to make this generic, and we
 * only test NuoDB.
 */
public class NuoDBDependencies {

   public static void checkDependencies() {
        try {
            com.nuodb.jdbc.DataSource dataSource = new com.nuodb.jdbc.DataSource();
            com.nuodb.hibernate.NuoDBDialect dialect = new com.nuodb.hibernate.NuoDBDialect();
            com.nuodb.jdbc.Driver driver = new com.nuodb.jdbc.Driver();

            System.out.println(">> NuoDB classes available:");
        } catch (Exception e) {
            System.err.println(">> Failed attempting to check for NuoDB dependencies: " + e);
            throw new GradleException("Unable to access NuoDB classes for tests: ${e.localizedMessage}");
        }

        return;
    }

    public static boolean isDatabaseAvailable(String hibernatePropertiesFile) {
        try {
            java.util.Properties props = new java.util.Properties();
            props.load(new java.io.FileReader(hibernatePropertiesFile));

            System.out.println('Testing connection using these properties:');
            Set entries = props.entrySet();
            
            for (Map.Entry e: entries) {
                if (((String) e.getKey()).startsWith("hibernate.connection"))
                    System.out.println("    " + e.getKey() + "=" + e.getValue());
            }

            com.nuodb.jdbc.DataSource dataSource = new com.nuodb.jdbc.DataSource();
            //dataSource.setDriverClassName(props.getProperty("hibernate.connection.driver_class"));
            dataSource.setUrl(props.getProperty("hibernate.connection.url").replace('.hib', ''));
            dataSource.setUsername(props.getProperty("hibernate.connection.username"));
            dataSource.setPassword(props.getProperty("hibernate.connection.password"));

            java.sql.Connection conn = dataSource.getConnection();
            System.out.println("    Dialect Jar is V${com.nuodb.hibernate.NuoDBDialect.version()}");
            System.out.println("    JDBC Jar is    V${conn.getMetaData().getDriverVersion()}");
            conn.close();
            dataSource.close();
        } catch (Exception e) {
            System.err.println(">> Failed attempting to check for database: " + e);
            throw new GradleException("Unable to access database for tests: ${e.localizedMessage}");
        }

        return true;
    }
}
// END: For NUODB
